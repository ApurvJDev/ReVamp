Problem Statement: You're given an sorted array arr of n integers and an integer x. Find the floor and ceiling of x in arr[0..n-1].
The floor of x is the largest element in the array which is smaller than or equal to x.
The ceiling of x is the smallest element in the array greater than or equal to x.

Pre-requisite: Lower Bound & Binary Search

Example 1:
Input Format: n = 6, arr[] ={3, 4, 4, 7, 8, 10}, x= 5
Result: 4 7
Explanation: The floor of 5 in the array is 4, and the ceiling of 5 in the array is 7.

Example 2:
Input Format: n = 6, arr[] ={3, 4, 4, 7, 8, 10}, x= 8
Result: 8 8
Explanation: The floor of 8 in the array is 8, and the ceiling of 8 in the array is also 8.

pair<int, int> getFloorAndCeil(vector<int> &a, int n, int x) {
	pair<int, int> res;

	int left = 0, right = n - 1, indx = 0;

	if(x < a[0]) {
		res.first = -1;
		res.second = a[0];
		return res;
	}
	if(x > a[n - 1]) {
		res.first = a[n - 1];
		res.second = -1;
		return res;
	}

	while(left <= right) {
		int mid = (left + right) / 2;

		if(a[mid] == x) {
			indx = mid;
			break;
		} else if(a[mid] < x) {
			left = mid + 1;
		} else {
			right = mid - 1;
		}
	}

	if(a[indx] == x) {
		res.first = a[indx];
		res.second = a[indx];
	} else {// cuz left > right
		res.first = a[right];
		res.second = a[left];
	}
	return res;
}
