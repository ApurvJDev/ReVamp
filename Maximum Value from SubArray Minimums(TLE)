Given an array arr[], with 0-based indexing, select any two indexes, i and j such that i < j. From the subarray arr[i...j], select the smallest and second smallest numbers and add them, you will get the score for that subarray. Return the maximum possible score across all the subarrays of array arr[].

Examples :

Input : arr[] = [4, 3, 1, 5, 6]
Output : 11
Explanation : Subarrays with smallest and second smallest are:- [4, 3] smallest = 3,second smallest = 4
[4, 3, 1] smallest = 1, second smallest = 3
[4, 3, 1, 5] smallest = 1, second smallest = 3
[4, 3, 1, 5, 6] smallest = 1, second smallest = 3
[3, 1] smallest = 1, second smallest = 3
[3, 1, 5] smallest = 1, second smallest = 3
[3, 1, 5, 6] smallest = 1, second smallest = 3
[1, 5] smallest = 1, second smallest = 5
[1, 5, 6] smallest = 1, second smallest = 5
[5, 6] smallest = 5, second smallest = 6
Maximum sum among all above choices is, 5 + 6 = 11.
Input : arr[] = [5, 4, 3, 1, 6] 
Output : 9

int pairWithMaxSum(vector<int> &arr) {
        
        int max = 0;
        
        for(int i = 0; i < arr.size() - 1; i++) {
            
            int smallest = 0, smaller = 0;
            
            if(arr[i] < arr[i + 1]) {
                
                smallest = arr[i];
                smaller = arr[i + 1];
                
            } else {
                
                smallest = arr[i + 1];
                smaller = arr[i];
            }
            // this if should be here as well
            if(smaller + smallest > max) {
                max = smaller + smallest;
            }
            
            for(int j = i + 2; j < arr.size(); j++) {
                
                if(arr[j] < smallest ) {
                    
                    smaller = smallest;
                    smallest = arr[j];
                    
                } else if(arr[j] < smaller && arr[j] > smallest) {
                    
                    smaller = arr[j];
                }
            }
            
            if(smaller + smallest > max) {
                max = smaller + smallest;
            }
        }
        return max;
    }
