Problem statement
You are given a positive integer ‘n’.
Your task is to find and return its square root. If ‘n’ is not a perfect square, then return the floor value of sqrt(n).
Sample Input 1:
6
Sample Output 1:
2
Explanation of Sample Input 1:
The square root of the given number 6 lies between 2 and 3, so the floor value is 2.
Sample Input 2:
100
Sample Output 2:
10
Explanation of Sample Output 2:
The square root of the given number 100 is 10.
Expected Time Complexity:
Try solving this in O(log(n)).

Constraints:
0 <= n <= 10 ^ 9

Time Limit: 1 sec.


int floorSqrt(int n)
{
    int left = 1, right = n, ans = 0;

    while(left <= right) {
        long long mid = (left + right) / 2;

        if(mid * mid <= (long long)n) {
            ans = max(ans,(int) mid);
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }
    return ans;
}
