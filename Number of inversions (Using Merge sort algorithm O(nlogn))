int c = 0;

void merge(vector<int>& a, int left, int mid, int right) {
    int l = left, r = mid + 1;
    vector<int> temp;

    while(l <= mid && r <= right) {
        if(a[l] <= a[r]) {
            temp.push_back(a[l]);
            l += 1;
        }
// right is smaller
        else {
            temp.push_back(a[r]);
            r += 1;
            c += mid - l + 1;
        }
    }

// adding remaining elements
    while(l <= mid) {
        temp.push_back(a[l]);
        l += 1;
    }
    while(r <= right) {
        temp.push_back(a[r]);
        r += 1;
    }

// adding temp to a
    for(int i = left; i <= right; i++) {
        a[i] = temp[i - left];
    }

}

void mergeSort(vector<int>& a, int left, int right) {
// base condition
    if(left >= right) {
        return;
    }

    int mid = (left + right) / 2;

    mergeSort(a, left, mid);

    mergeSort(a, mid + 1, right);

    merge(a, left, mid, right);
}

int numberOfInversions(vector<int>&a, int n) {
    mergeSort(a, 0, n - 1);
    return c;
}
