Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.
Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

Example 1:
Input: x = 123
Output: 321

Example 2:
Input: x = -123
Output: -321

class Solution {
public:
    int reverse(int x) {
        long revX = 0; // to avoid signed integer overflow when multiply by 10 
        int digit; // for storing last digits
        
        while(x !=0 ) {
            //extracting last digit
            digit = x % 10;

            //storing digit in reverse of the number
            revX = revX * 10 + digit;

            //removing the last digit
            x = x / 10;
        }
        //preventing signed integer overflow
        if(revX > INT_MAX || revX < INT_MIN) {
            return 0;
        }
        return int(revX);
    }
};
