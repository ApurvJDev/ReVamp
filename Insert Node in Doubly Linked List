Given a doubly-linked list, a position p, and an integer x. The task is to add a new node with value x at the position just after pth node in the doubly linked list and return the head of updated list.
Examples:
Input: LinkedList: 2<->4<->5, p = 2, x = 6 
Output: 2<->4<->5<->6
Explanation: p = 2, and x = 6. So, 6 is inserted after p, i.e, at position 3 (0-based indexing).
Input: LinkedList: 1<->2<->3<->4, p = 0, x = 44
Output: 1<->44<->2<->3<->4
Explanation: p = 0, and x = 44 . So, 44 is inserted after p, i.e, at position 1 (0-based indexing).
Expected Time Complexity: O(n)
Expected Auxilliary Space: O(1)

Constraints:
1 <= p < size of doubly linked list <= 106
1 <= x <= 106

Node *addNode(Node *head, int pos, int data) {
        Node* newNode = new Node(data);
        Node* curr = head;
        int index = 0;
        
        while(curr) {
            if(index == pos) {
                newNode->next = curr->next; // linking new Node to next and prev
                newNode->prev = curr;
                
                if(curr->next != nullptr) { //  make sure next node is not nullptr
                    curr->next->prev = newNode;
                }
                
                curr->next = newNode; // linking curr pos to new Node
                return head;
            } 
            else {
                curr = curr->next;
                index += 1;
            }
        }
        return head;
    }
