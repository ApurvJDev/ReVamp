You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104



bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size(), col = matrix[0].size();
        int topRow = 0, botRow = row - 1;

        while(topRow <= botRow) { // finding in which row target could be
            int midRow = (topRow + botRow) / 2;

            if(target > matrix[midRow][col - 1]) { // target > last val of row
                topRow = midRow + 1;
            } 
            else if(target < matrix[midRow][0]) { // target < first val of row
                botRow = midRow - 1;
            }
            else {  // found the target row
                break;
            }
        }
        if(topRow > botRow) { // target row doesn't exist
            return false;
        }
        int left = 0, right = col - 1, midRow = (topRow + botRow) / 2;
        while(left <= right) {
            int mid = (left + right) / 2;

            if(matrix[midRow][mid] == target) { // target found
                return true;
            } 
            else if(matrix[midRow][mid] < target) { // target > mid
                left = mid + 1;
            }
            else { // target < mid
                right = mid - 1; 
            }
        }
        return false;
    }
