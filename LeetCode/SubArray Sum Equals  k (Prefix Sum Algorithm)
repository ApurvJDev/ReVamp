Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.
Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> prefixSumMap;
        prefixSumMap[0] = 1; // sum 0 for first 0 elements
        int sum = 0, count = 0;
        for(int i = 0; i < nums.size(); i++) {
            sum = sum + nums[i];

            if(prefixSumMap.find(sum - k) != prefixSumMap.end()) {
                count = count + prefixSumMap[sum - k];
            }

            prefixSumMap[sum]++; //insert prefixSum freq in map
        }
        return count;
    }
};
