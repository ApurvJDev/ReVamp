Given a string s, return the longest palindromic substring in s.
Example 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:
Input: s = "cbbd"
Output: "bb"

Constraints:
1 <= s.length <= 1000
s consist of only digits and English letters.

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        if(n < 2) return s; // single character is a palindrome

        int maxLen = 1, start = 0;

        for(int i = 0; i < n; i++) { // expanding palindromes from all centres
            expandCentre(s, i, i, n, start, maxLen); // odd length (babad)
            expandCentre(s, i, i + 1, n, start, maxLen); // even length (cbbd)
        }
        return s.substr(start, maxLen); 
    }
private:// finds the substring with the maxLen
    void expandCentre(string& s, int left, int right, int& n, int& start, int& maxLen) {
        while(left >= 0 && right < n && s[left] == s[right]) {
            int currLen = right - left + 1;
            if(currLen > maxLen) {
                start = left;
                maxLen = currLen;
            }
            left -= 1;
            right += 1; 
        }
    }
};
