Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9

Constraints:
n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105


int trap(vector<int>& height) {
        int n = height.size();
        int maxLeft[n], maxRight[n];

// maxLeft = maximum value at the left of ith position
        int maxVal = 0;
        for(int i = 0; i < n; i++) {
            maxLeft[i] = maxVal;
            maxVal = max(maxVal, height[i]);
        }

// maxRight = maximum value at the right of ith position
        maxVal = 0;
        for(int i = n - 1; i >= 0; i--) {
            maxRight[i] = maxVal;
            maxVal = max(maxVal, height[i]);
        }

// water trapped = min(maxLeft[i], maxRight[i]) - height[i]
        int trappedWater = 0;
        for(int i = 0; i < n; i++) {
            int temp = min(maxLeft[i], maxRight[i]) - height[i];
            if(temp > 0) {
                trappedWater += temp;
            }
        }
        return trappedWater;
    }
