Given an array of integers arr, return true if and only if it is a valid mountain array.
Recall that arr is a mountain array if and only if:
arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

Example 1:
Input: arr = [2,1]
Output: false
Example 2:
Input: arr = [3,5,5]
Output: false
Example 3:
Input: arr = [0,3,2,1]
Output: true
Input arr = [0,1,2,3,4,5,6,7,8,9]
Output false
Input arr = [9,8,7,6,5,4,3,2,1,0]
Output false
Input arr = [1,3,2]
Output true

Constraints:
1 <= arr.length <= 104
0 <= arr[i] <= 104

bool validMountainArray(vector<int>& arr) {
        int n = arr.size();
        if(n < 3) return false;
        int incrCnt = 0, decrCnt = 0;
        bool increasing = true, decreasing = false;
        for(int i = 1; i < n; i++) {
            if(increasing && arr[i] > arr[i - 1]) {
                incrCnt += 1;
                continue;
            }
            else if(arr[i] == arr[i - 1]) {
                return false;
            }
            else if(increasing && arr[i] < arr[i - 1]) {
                decrCnt += 1;
                increasing = false;
                decreasing = true;
            }
            else if(decreasing && arr[i] >= arr[i - 1]) {
                return false;
            }
            else if(decreasing && arr[i] < arr[i - 1]) {
                decrCnt += 1;
                continue;
            }
        }
        if(incrCnt > 0 && decrCnt > 0) return true;
        return false;
    }
