Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1

int singleNumber(vector<int>& nums) {
        unordered_map<int, int>map;
        for(int i : nums) {
            map[i]++;
        }
        for(auto it = map.begin(); it != map.end(); it++) {
            if(it->second == 1) {
                return it->first;
            }
        }
        return -1; // never get exec anyways
    }
