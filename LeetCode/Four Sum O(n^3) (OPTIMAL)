Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:
Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]

Constraints:
1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109

vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        
        sort(nums.begin(), nums.end());

        for(int i = 0; i < nums.size() - 1; i++) {

            if(i > 0 && nums[i - 1] == nums[i]) {
                continue;
            }

            for(int j = i + 1; j < nums.size(); j++) {
                
                if(j > i + 1 && nums[j - 1] == nums[j]) {
                    continue;
                }

                int left = j + 1, right = nums.size() - 1;
                long long sum = nums[i] + nums[j];
                long long ans = target - sum;

                while(left < right) {
                    if(nums[left] + nums[right] < ans) {
                        left += 1;
                    } 
                    else if(nums[left] + nums[right] > ans) {
                        right -= 1;
                    }
                    else {
                        res.push_back({nums[i], nums[j], nums[left], nums[right]});
                        left += 1;
                        while(nums[left - 1] == nums[left] && left < right) {
                            left += 1;
                        }
                    }
                }
            }   
        }
        return res;
    }
