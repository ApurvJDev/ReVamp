Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in sentence.
Return the index of the word in sentence (1-indexed) where searchWord is a prefix of this word. If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.
A prefix of a string s is any leading contiguous substring of s.
Example 1:
Input: sentence = "i love eating burger", searchWord = "burg"
Output: 4
Explanation: "burg" is prefix of "burger" which is the 4th word in the sentence.
Example 2:
Input: sentence = "this problem is an easy problem", searchWord = "pro"
Output: 2
Explanation: "pro" is prefix of "problem" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.
Example 3:
Input: sentence = "i am tired", searchWord = "you"
Output: -1
Explanation: "you" is not a prefix of any word in the sentence.



bool naiveMatch(string a, string b) {
        for(int i = 0; i < b.size(); i++) {
            if(a[i] != b[i]) return false;
        }
        return true;
    }
    int isPrefixOfWord(string sentence, string searchWord) {
        int index = 1;
        string temp = "";
        for(int i = 0; i < sentence.size(); i++) {
            if(sentence[i] != ' ') {
                temp += sentence[i];
            }
            else { // sentence[i] = ' '
                if(naiveMatch(temp, searchWord)) return index;
                index += 1;
                temp = "";
            }
        }
        if(naiveMatch(temp, searchWord)) return index; // last word
        return -1;
    }
