You are given an integer num. You can swap two digits at most once to get the maximum valued number.
Return the maximum valued number you can get.

Example 1:
Input: num = 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.
Example 2:
Input: num = 9973
Output: 9973
Explanation: No swap.
 
Constraints:
0 <= num <= 108

int maximumSwap(int num) {
        vector<int> digits;
        int x = num;
        while(x > 0) {
            digits.push_back(x % 10); // extract last digit
            x = x / 10;               //remove last digit
        }
        reverse(digits.begin(), digits.end());
        int n = digits.size();
        int maxArr[n];
        unordered_map<int, int> map;
// find the max number and it's index
        int maxVal = -1;
        for(int j = n - 1; j >= 0; j--) {
            if(digits[j] > maxVal) {
                maxVal = digits[j];
                maxArr[j] = digits[j];
                if(map.find(maxVal) == map.end()) {
                    map[maxVal] = j; 
                }
            }
            else {
                maxArr[j] = maxVal;
            }
        }
        for(int i = 0; i < digits.size(); i++) {
            if(maxArr[i] > digits[i]) {
                int index = map[maxArr[i]];
                swap(digits[i], digits[index]);
                break;
            }
        }
        int res = 0;
        for(int digit : digits) {
            res = res * 10 + digit;
        }
        return res;
    }
