Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:
A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.


class Solution {
public:
    bool checkBox(int row, int col, vector<vector<char>>& board) {
        unordered_map<char, int> boxMap;
        for(int i = row; i < row + 3; i++) {
            for(int j = col; j < col + 3; j++) {
                if(board[i][j] != '.') {
                    boxMap[board[i][j]] += 1;
                    if(boxMap[board[i][j]] > 1) return false;
                }
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        // check row
        for(int i = 0; i < 9; i++) { // row iterator
            unordered_map<char, int> rowMap; // hash map for each row
            for(int j = 0; j < 9; j++) { // column iterator
                if(board[i][j] != '.') {   // inserting only numbers
                    rowMap[board[i][j]] += 1;
                    if(rowMap[board[i][j]] > 1) { // duplicate in row
                        return false;
                    }
                }
            }
        }
        // check column
        for(int i = 0; i < 9; i++) { // column iterator
            unordered_map<char, int> colMap; // hash map for each column
            for(int j = 0; j < 9; j++) { // row iterator
                if(board[j][i] != '.') {   // inserting only numbers
                    colMap[board[j][i]] += 1;
                    if(colMap[board[j][i]] > 1) { // duplicate in column
                        return false;
                    }
                }
            }
        }
        // check box
        for(int i = 0; i < 9; i = i + 3) {
            for(int j = 0; j < 9; j = j + 3) {
                if(checkBox(i, j, board) == false) return false;
            }
        }
        return true;
    }
};
