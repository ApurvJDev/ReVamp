Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

Example 1:
Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:
Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:
Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25

Constraints:
-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-104 <= xn <= 104


double myPow(double x, int n) {          // 2^10 = (2 x 2)^5  
        double res = 1.0;                // 4^5  = 4 x 4^4
                                         // 4^4  = (4 x 4)^2
        bool isNeg = false;              // 16^2 = (16 x 16)^1
        if(n < 0) isNeg = true;         // 256^1 = 256 x 256^0 <- n = 0 
        long nn = n;
        if(isNeg) nn = nn * -1;

        while(nn > 0) {  // base case

            if(nn % 2 == 1) { // power is odd
                res = x * res; 
                nn = nn - 1;
            }
            else { // power is even
                x = x * x;
                nn = nn / 2;
            }
        }
        return isNeg ? 1 / res : res;
    }
