int singleNonDuplicate(vector<int>& nums) {
        int left = 0, right = nums.size() - 1;

        if(nums.size() == 1) return nums[0];
        if(nums[0] != nums[1]) return nums[0];
        if(nums[right] != nums[right - 1]) return nums[right];
        
        while(left <= right) {
            int mid = (left + right) / 2;

            if(nums[mid - 1] != nums[mid] && nums[mid + 1] != nums[mid]) {
                return nums[mid];
            } 
            // mid pair starts at mid - 1
            else if(nums[mid] == nums[mid - 1]) { 
                if((mid - 1) % 2 != 0) { // single lies on the left half
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
            // mid pair starts at mid + 1
            else {// nums[mid] == nums[mid + 1]
                if(mid % 2 == 0) { //  single lies on the right half
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return -1;
    }
