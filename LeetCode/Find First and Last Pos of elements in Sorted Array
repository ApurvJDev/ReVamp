Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

Input nums = [1], target = 1
Output: [0,0]

Input nums = [2,2], target = 2
Output: [0,1]


vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res(2, 0);
        int left = 0, right = nums.size() - 1, mid = 0;

        while(left <= right) {
            mid = (left + right) / 2;

            if(nums[mid] == target) {
                break;
            } else if(nums[mid] > target) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        if(left > right) {  // when target is not found
            res[0] = -1; res[1] = -1;
            return res;
        }
        int first = mid, last = mid;
        
        while(first >= 0 && nums[first] == target) {    // finding first position
            first -= 1;
        }
        res[0] = first + 1;

        while(last < nums.size() && nums[last] == target) { // finding last position
           last += 1;
        }
        res[1] = last - 1;
        return res;
    }
