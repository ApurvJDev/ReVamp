Given the head of a linked list, return the list after sorting it in ascending order.
Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:
Input: head = []
Output: []

Constraints:
The number of nodes in the list is in the range [0, 5 * 104].
-105 <= Node.val <= 105

ListNode* sortList(ListNode* head) {
        if(head == nullptr) return nullptr;
        if(head->next == nullptr) return head;

        vector<int> nums;
        ListNode* curr = head;
        while(curr) {
            nums.push_back(curr->val);
            curr = curr->next;
        }
        
        sort(nums.begin(), nums.end());

        ListNode* newHead = nullptr;
        curr = nullptr;
        for(int i = 0; i < nums.size(); i++) {
            // create new node for each num
            ListNode* newNode = new ListNode(nums[i]);

            if(newHead == nullptr) {
                newHead = newNode;
                curr = newHead;
            }
            else {
                // link newNode to curr node
                curr->next = newNode;
                curr = curr->next;
            }
        }
        return newHead;
    }
