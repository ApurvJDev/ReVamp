class Solution {
public:
    int c = 0;

    void merge(int left, int mid, int right, vector<int>& nums) {
        int l = left, r = mid + 1;
        vector<int> temp;

// counting reverse pairs
        int j = mid + 1;
        for(int i = left; i <= mid; i++) {
            while(j <= right && nums[i] > (long long)2 * nums[j]) {
                j += 1;
            }
            c += j - (mid + 1);
        }

        while(l <= mid && r <= right) {
            if(nums[l] <= nums[r]) {
                temp.push_back(nums[l]);
                l += 1;
            }
            else {
                temp.push_back(nums[r]);
                r += 1;
            }
        }
// add remaining elements into the array
        while(l <= mid) {
            temp.push_back(nums[l]);
            l += 1;
        }
        while(r <= right) {
            temp.push_back(nums[r]);
            r += 1;
        }
// add temp back into the main arr
        for(int i = left; i <= right; i++) {
            nums[i] = temp[i - left];
        }
    }

    void mergeSort(int left, int right, vector<int>& nums) {
        // base condition
        if(left >= right) {
            return;
        }
        int mid = (left + right) / 2;

        mergeSort(left, mid, nums);
        mergeSort(mid + 1, right, nums);
        merge(left, mid, right, nums);
    }

    int reversePairs(vector<int>& nums) {
        mergeSort(0, nums.size() - 1, nums);
        return c;
    }
};
