Given a sorted doubly linked list of positive distinct elements, the task is to find pairs in a doubly-linked list whose sum is equal to given value target.
Example 1:
Input:  1 <-> 2 <-> 4 <-> 5 <-> 6 <-> 8 <-> 9
target = 7
Output: (1, 6), (2,5)
Explanation: We can see that there are two pairs 
(1, 6) and (2,5) with sum 7.

Example 2:
Input: 1 <-> 5 <-> 6
target = 6
Output: (1,5)
Explanation: We can see that there is one pairs  (1, 5) with sum 6.

vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)
    {
        vector<int> arr;
        vector<pair<int, int>> res;
        Node* curr = head;
        while(curr) {
            arr.push_back(curr->data);
            curr = curr->next;
        }
        
        unordered_map<int, int> map;
        for(int i = 0; i < arr.size(); i++) {
            map[arr[i]]++;
        }
        
        for(int i = 0; i < arr.size(); i++) {
            int rem = target - arr[i];
            auto it = map.find(rem);
            if(it != map.end()) { // num 2 is found
                if(it->first == arr[i] && it->second == 1) continue;
                res.push_back( { arr[i], rem } );
                map[arr[i]]--;
                if(map[arr[i]] == 0) map.erase(arr[i]);
                map[rem]--;
                if(map[rem] == 0) map.erase(rem);
            }
        }
        return res;
    }
