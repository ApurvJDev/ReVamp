Youâ€™re given a linked list. The last node might point to null, or it might point to a node in the list, thus forming a cycle.
Find out whether the linked list has a cycle or not, and the length of the cycle if it does.
If there is no cycle, return 0, otherwise return the length of the cycle.
Example:
Input: Linked List: 4 -> 10 -> 3 -> 5 -> 10(at position 2)
Output: Length of cycle = 3
Explanation: The cycle is 10, 3, 5.


int lengthOfLoop(Node *head) {
    int count = 0, index = 0;
    unordered_map<Node*, int> map;
    Node* curr = head;

    while(curr) {
        auto it = map.find(curr);
        if(it == map.end()) {
            map[curr] = index;  // first time node is encountered
        }
        else {
            int result = count - it->second; // count - index = length of loop
            return result;
        }
        count = count + 1;
        index = index + 1;
        curr = curr->next;
    }
    return 0;
}
