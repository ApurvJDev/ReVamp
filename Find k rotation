Sample Input 1:
4
2 3 4 1
Sample Output 1:
3   
Explanation of sample output 1:
If we right rotate the array {1, 2, 3, 4} by '3' times then we will get {2, 3, 4, 1}. Thus 'r' = 3.
Sample Input 2:
3
1 2 3
Sample Output 2:
0
Explanation of sample output 2:
If we right rotate the array {1, 2, 3} by '0' time then we will get {1, 2, 3}. Thus 'r' = 0.
Expected time complexity:
Can you solve this in O(logn) time complexity?
Constraints:
1 <= ‘n’ <= 10^5    
1 <= ‘arr[i]’ <= 10^9
Time Limit: 1 sec

int findKRotation(vector<int> &arr){
// . . . > smallest < . . . 
// . . . mid . . . last
// if mid < last -> smallest is left half
// else smallest in right half
    int left = 0, right = arr.size() - 1;   

    while(left < right) {
        int mid = (left + right) / 2;
        if(arr[mid] < arr[right]) {
            right = mid;
        } else {
            left = mid + 1;
        }
    }
    return left;
}
